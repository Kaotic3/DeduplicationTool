@page "/processingpage"
@using DeduplicationTool.Models
@using Microsoft.Win32;
@using System;
@using System.Collections.Generic;
@using System.ComponentModel;
@using System.IO;
@using System.Linq;
@using System.Text;
@using System.Threading.Tasks;
@using System.Windows;
@using System.ComponentModel.DataAnnotations
@inject IJSRuntime jsRuntime

<PageTitle>PDF Processing Page</PageTitle>

<style>
    body {
        background-color: #292C33;
        color: white;
    }
    div {text-align: left; }
    textarea { resize: none; font-size: 16px; }
    .btn:focus {
        background-color: #ff6e40;
    }
    .btn {
        background-color: #4d7985;
    }
</style>

<h3>PDF Processing</h3>

<text>&nbsp; &nbsp;&nbsp;</text>

<div>
    <InputFile OnChange="@OnFileSelection"></InputFile>
</div>

<text>&nbsp; &nbsp;&nbsp;</text>
<div class="form-check">
    <input class="form-check-input" type="checkbox" @bind-value="HasImage" id="imageCheck" />
    <label class="form-check-label" for="imageCheck">
        Document Contains Images
    </label>
</div>
<div>
    <text>&nbsp; &nbsp;&nbsp;</text>
</div>
<div>
    @foreach (var choice in new[] { Processes.Replace, Processes.Remove, Processes.Move, Processes.None })
    {
        <label style="margin: 10px">
            <input name="processChoice" type="radio"
            value="@choice"
            checked="@(currentChoice == choice)"
            @onchange="@(() => {currentChoice = choice; })">
            @choice.ToString()
        </label>
    
    }
</div>
<div>
    <text>&nbsp; &nbsp;&nbsp;</text>
</div>
<div>
    @foreach (var choice in new[] { PaginationProcess.Pagination, PaginationProcess.Repagination, PaginationProcess.None })
    {
        <label style="margin: 10px">
            <input name="paginationChoice" type="radio"
            value="@choice"
            checked="@(newChoice == choice)"
            @onchange="@(() => {newChoice = choice; })">
            @choice.ToString()
        </label>
    }
</div>
@*<div>
    <div style="margin-left: 10px; margin-right: 40px">
       <p>Analysis Results</p>
       <textarea cols="100" rows="5" @bind="placeHolder"></textarea>
    </div>
</div>*@
<text>&nbsp; &nbsp;&nbsp;</text>
<div >
    <div style="margin-left: 10px; margin-right: 40px">
       <p>Processing Results</p>
       <textarea cols="100" rows="10" @bind="outputText"></textarea>
    </div>
</div>
<text>&nbsp; &nbsp;&nbsp;</text>
<button class="btn btn-primary" @onclick="DownloadPDF">Download PDF File</button>
<text>&nbsp; &nbsp;&nbsp;</text>



@code {
    string? outputText;
    public string? placeHolder { get; set; }
    public bool HasImage { get; set; }
    enum Processes { Replace, Remove, Move, None };
    enum PaginationProcess { Pagination, Repagination, None }
    Processes currentChoice = Processes.None;
    PaginationProcess newChoice = PaginationProcess.None;
    public byte[]? downloadFile;
    public string? fileName;
    private int MAXALLOWEDSIZE = 15000000;

    protected override void OnInitialized()
    {
        placeHolder = "Enter Placeholder Language here." + "\n" + "Enter XX where you want the number for the duplicate page"+ "\n" + "Example:" + "\n\n" + "Placeholder for Duplicate of Page XX";
    }
    private async Task DownloadPDF()
    {
        string base64String = Convert.ToBase64String(downloadFile, 0, downloadFile.Length);
        await jsRuntime.InvokeVoidAsync("downloadFile", "application/pdf", base64String, fileName);
    }
    public void Reset()
    {
        outputText = "";
        HasImage = false;
    }
    private async Task OnFileSelection(InputFileChangeEventArgs e)
    {
        if (outputText != "" || outputText != null)
        {
            Reset();
        }
        ReplacePDFPages replaceModel = new ReplacePDFPages();
        RemovePDFPages removeModel = new RemovePDFPages();
        Pagination paginationModel = new Pagination();
        PDFAnalysis analysisModel = new PDFAnalysis();
        MovePDFPages moveModel = new MovePDFPages();
        IBrowserFile pdfFile = e.File;
        Stream stream = pdfFile.OpenReadStream(MAXALLOWEDSIZE);
        var msPDF = new MemoryStream();
        await stream.CopyToAsync(msPDF);
        msPDF.Position = 0;

        if (currentChoice == Processes.Replace)
        {
            // Since the numbering doesn't change it changes Repaginate to Paginate.
            if (newChoice == PaginationProcess.Repagination)
            {
                newChoice = PaginationProcess.Pagination;
            }
            // If paginate is true then it will number the document in its current state
            if (newChoice == PaginationProcess.Pagination)
            {
                // Does a different comparison if the document has images on the page.
                if (HasImage == true)
                {
                    outputText = "Replace Pages with images." + Environment.NewLine + "Paginate Document after replacement" + Environment.NewLine + Environment.NewLine;
                    outputText += Environment.NewLine + $"Processing file: " + pdfFile.Name + Environment.NewLine;

                    var outputPdf = await replaceModel.ReplacePaginateImages(msPDF, placeHolder);
                    var outputFileToUser = $"{pdfFile.Name.Replace(".pdf", "")} Images Placeholder Paginated.pdf";
                    outputText += Environment.NewLine + $"File Created: " + Environment.NewLine + outputFileToUser + Environment.NewLine;
                    downloadFile = outputPdf;
                    fileName = outputFileToUser;
                    outputText += $"Processing Complete";
                }
                // Just compares the text on each page.
                else
                {
                    outputText = "Replace Pages using only text" + Environment.NewLine + "Paginate Document after replacement";
                    outputText += Environment.NewLine + $"Processing file: " + Environment.NewLine + pdfFile.Name + Environment.NewLine;
                    var outputPdf = await replaceModel.ReplacePaginateText(msPDF, placeHolder);
                    outputText += $"Replaced Pages: " + Environment.NewLine;
                    var outputFileToUser = $"{pdfFile.Name.Replace(".pdf", "")} Text Placeholder Paginated.pdf";
                    outputText += Environment.NewLine + $"File Created: " + Environment.NewLine + outputFileToUser + Environment.NewLine;
                    //string numberedDoc = Pagination.PaginateDocument(outputPdf);
                    downloadFile = outputPdf;
                    fileName = outputFileToUser;
                    outputText += $"Processing Complete";
                }
            }
            else if (newChoice == PaginationProcess.None)
            {
                if (HasImage == true)
                {
                    outputText = "Replace Pages with images." + Environment.NewLine + Environment.NewLine;
                    outputText += Environment.NewLine + $"Processing file: " + Environment.NewLine + pdfFile.Name + Environment.NewLine;
                    var outputPdf = await replaceModel.ReplacePaginateImages(msPDF, placeHolder);
                    var outputFileToUser = $"{pdfFile.Name.Replace(".pdf", "")} Images Placeholder.pdf";
                    outputText += Environment.NewLine + $"File Created: " + Environment.NewLine + outputFileToUser + Environment.NewLine;
                    downloadFile = outputPdf;
                    fileName = outputFileToUser;
                    outputText += $"Processing Complete";
                }
                else
                {
                    outputText = "Replace Pages using text" + Environment.NewLine;
                    outputText += $"Processing file: " + Environment.NewLine + pdfFile.Name + Environment.NewLine;
                    var outputPdf = await replaceModel.ReplacePaginateText(msPDF, placeHolder);
                    var outputFileToUser = $"{pdfFile.Name.Replace(".pdf", "")} Text Placeholder.pdf";
                    outputText += Environment.NewLine + $"File Created: " + Environment.NewLine + outputFileToUser + Environment.NewLine;
                    downloadFile = outputPdf;
                    fileName = outputFileToUser;
                    outputText += $"Processing Complete";
                }
            }
        }
        else if (currentChoice == Processes.Remove)
        {
            if (newChoice == PaginationProcess.Pagination)
            {
                if (HasImage == true)
                {
                    outputText = "Remove Pages using images." + Environment.NewLine + "Paginate Document" + Environment.NewLine;
                    outputText += $"Processing file: " + Environment.NewLine + pdfFile.Name + Environment.NewLine;

                    var outputPdf = await removeModel.RemovePaginateImages(msPDF);
                    var outputFileToUser = $"{pdfFile.Name.Replace(".pdf", "")} Removed on Images Paginated.pdf";
                    var numberedDoc = Pagination.PaginateDocument(outputPdf);
                    outputText += Environment.NewLine + $"File Created: " + Environment.NewLine + outputFileToUser + Environment.NewLine;
                    downloadFile = numberedDoc;
                    fileName = outputFileToUser;
                    outputText += $"Processing Complete";
                }
                else
                {
                    outputText = "Remove Pages using text." + Environment.NewLine + "Paginate Document" + Environment.NewLine;
                    outputText += Environment.NewLine + $"Processing file: " + Environment.NewLine + pdfFile.Name + Environment.NewLine;

                    var outputPdf = await removeModel.RemovePaginateText(msPDF);
                    var outputFileToUser = $"{pdfFile.Name.Replace(".pdf", "")} Removed on Text Paginated.pdf";
                    var numberedDoc = Pagination.PaginateDocument(outputPdf);
                    outputText += Environment.NewLine + $"File Created: " + Environment.NewLine + outputFileToUser + Environment.NewLine;
                    downloadFile = numberedDoc;
                    fileName = outputFileToUser;
                    outputText += $"Processing Complete";
                }
            }
            else if (newChoice == PaginationProcess.Repagination)
            {
                if (HasImage == true)
                {
                    outputText = "Remove pages using images." + Environment.NewLine + "Keep original pagination." + Environment.NewLine;
                    outputText += Environment.NewLine + $"Processing file: " + Environment.NewLine + pdfFile.Name + Environment.NewLine;

                    var (outputPdf, removedPages) = await removeModel.RemoveRepaginateImages(msPDF);
                    if (outputPdf != null)
                    {
                        var countResult = await analysisModel.PDFPageCount(outputPdf);
                        int pageCount = int.Parse(countResult);
                        var pageArray = removedPages.Split(new[] { '\n', '\r' }, StringSplitOptions.RemoveEmptyEntries);
                        List<string> pagesAsString = new List<string>(pageArray);
                        List<int> pagesToRemove = new List<int>();
                        foreach (var page in pagesAsString)
                        {
                            pagesToRemove.Add(int.Parse(page));
                        }
                        var outputArray = outputPdf.ToArray();
                        var numberedDoc = Pagination.RepaginateMovedPages(outputArray, pageCount, pagesToRemove);
                        var outputFileToUser = $"{pdfFile.Name.Replace(".pdf", "")} Removed on Images Repaginated.pdf";
                        downloadFile = numberedDoc;
                        fileName = outputFileToUser;
                    }
                    outputText += Environment.NewLine + $"File Created: " + Environment.NewLine + fileName + Environment.NewLine;
                    outputText += $"Processing Complete";
                }
                else
                {
                    // THIS IS UPDATED - NOW DO THE REST!! lol
                    outputText = "Remove Pages using text." + Environment.NewLine + "Keep original pagination." + Environment.NewLine;
                    outputText += Environment.NewLine + $"Processing file: " + Environment.NewLine + pdfFile.Name + Environment.NewLine;
                    var (outputPdf, removedPages, pageCount) = await removeModel.RemoveRepaginateText(msPDF);
                    var outputFileToUser = $"{pdfFile.Name.Replace(".pdf", "")} Removed on Text Repaginated.pdf";
                    downloadFile = outputPdf.ToArray();
                    fileName = outputFileToUser;
                    outputText += $"Processing Complete";
                }
            }
            else
            {
                if (HasImage == true)
                {
                    outputText = "Remove Pages using images." + Environment.NewLine + Environment.NewLine;
                    outputText += Environment.NewLine + $"Processing file: " + Environment.NewLine + pdfFile.Name + Environment.NewLine;
                    var outputPdf = await removeModel.RemovePaginateImages(msPDF);
                    var outputFileToUser = $"{pdfFile.Name.Replace(".pdf", "")} Removed on Images.pdf";
                    outputText += Environment.NewLine + $"File Created: " + Environment.NewLine + outputFileToUser + Environment.NewLine;
                    var buffer = outputPdf.ToArray();
                    downloadFile = buffer;
                    fileName = outputFileToUser;
                    outputText += $"Processing Complete";
                }
                else
                {
                    outputText = "Remove Pages using text." + Environment.NewLine + Environment.NewLine;
                    outputText += Environment.NewLine + $"Processing file: " + Environment.NewLine + pdfFile.Name + Environment.NewLine;
                    var outputPdf = await removeModel.RemovePaginateText(msPDF);
                    var outputFileToUser = $"{pdfFile.Name.Replace(".pdf", "")} Removed on Text.pdf";
                    outputText += Environment.NewLine + $"File Created: " + Environment.NewLine + outputFileToUser + Environment.NewLine;
                    var buffer = outputPdf.ToArray();
                    downloadFile = buffer;
                    fileName = outputFileToUser;
                    outputText += $"Processing Complete";
                }
            }
        }
        else if (currentChoice == Processes.Move)
        {
            if (newChoice == PaginationProcess.Pagination)
            {
                if (HasImage == true)
                {
                    outputText = "Move Pages using images." + Environment.NewLine + "Paginate document." + Environment.NewLine;
                    outputText += Environment.NewLine + $"Processing file: " + Environment.NewLine + pdfFile.Name + Environment.NewLine;

                    var outputPdf = await moveModel.MovePaginateImages(msPDF);
                    var outputFileToUser = $"{pdfFile.Name.Replace(".pdf", "")} Moved on Images Paginated.pdf";

                    var numberedDoc = Pagination.PaginateDocument(outputPdf);
                    outputText += Environment.NewLine + $"File Created: " + Environment.NewLine + outputFileToUser + Environment.NewLine;
                    downloadFile = numberedDoc;
                    fileName = outputFileToUser;
                    outputText += $"Processing Complete";
                }
                else
                {
                    outputText = "Move Pages using text." + Environment.NewLine + "Paginate document." + Environment.NewLine;
                    outputText += Environment.NewLine + $"Processing file: " + Environment.NewLine + pdfFile.Name + Environment.NewLine;
                    var outputPdf = await moveModel.MovePaginateText(msPDF);
                    var numberedDoc = Pagination.PaginateDocument(outputPdf);
                    var outputFileToUser = $"{pdfFile.Name.Replace(".pdf", "")} Moved on Images Paginated.pdf";
                    outputText += Environment.NewLine + $"File Created: " + Environment.NewLine +  outputFileToUser + Environment.NewLine;
                    downloadFile = numberedDoc;
                    fileName = outputFileToUser;
                    outputText += $"Processing Complete";
                }
            }
            else if (newChoice == PaginationProcess.Repagination)
            {
                if (HasImage == true)
                {
                    outputText = "Move Pages using images." + Environment.NewLine + "Repaginate document." + Environment.NewLine;
                    outputText += Environment.NewLine + $"Processing file: " + Environment.NewLine + pdfFile.Name + Environment.NewLine;

                    var (outputPdf, pagesToCopy) = await moveModel.MoveRepaginateImages(msPDF);
                    string pageCountAsString = await analysisModel.PDFPageCount(outputPdf);
                    int pageCount = int.Parse(pageCountAsString);
                    var pageArray = pagesToCopy.Split(new[] { '\n', '\r' }, StringSplitOptions.RemoveEmptyEntries);
                    List<string> pagesAsString = new List<string>(pageArray);
                    List<int> pagesToRemove = new List<int>();
                    var outputFileToUser = $"{pdfFile.Name.Replace(".pdf", "")} Moved on Images Repaginated.pdf";
                    foreach (var page in pagesAsString)
                    {
                        pagesToRemove.Add(int.Parse(page));
                    }
                    var outputArray = outputPdf.ToArray();
                    var numberedDoc = Pagination.RepaginateMovedPages(outputArray, pageCount, pagesToRemove);
                    outputText += Environment.NewLine + $"File Created: " + Environment.NewLine + outputFileToUser + Environment.NewLine;
                    downloadFile = numberedDoc;
                    fileName = outputFileToUser;
                    outputText += $"Processing Complete";
                }
                else
                {
                    outputText = "Move Pages using text." + Environment.NewLine + "Repaginate document." + Environment.NewLine;
                    outputText += Environment.NewLine + $"Processing file: " + Environment.NewLine + pdfFile.Name + Environment.NewLine;

                    var (outputPdf, pagesToCopy) = await moveModel.MoveRepaginateText(msPDF);
                    string pageCountAsString = await analysisModel.PDFPageCount(outputPdf);
                    int pageCount = int.Parse(pageCountAsString);
                    var pageArray = pagesToCopy.Split(new[] { '\n', '\r' }, StringSplitOptions.RemoveEmptyEntries);
                    List<string> pagesAsString = new List<string>(pageArray);
                    List<int> pagesToRemove = new List<int>();
                    foreach (var page in pagesAsString)
                    {
                        pagesToRemove.Add(int.Parse(page));
                    }
                    var outputArray = outputPdf.ToArray();
                    var numberedDoc = Pagination.RepaginateMovedPages(outputArray, pageCount, pagesToRemove);
                    var outputFileToUser = $"{pdfFile.Name.Replace(".pdf", "")} Moved on Text Repaginated.pdf";
                    outputText += Environment.NewLine + $"File Created: " + Environment.NewLine + outputFileToUser + Environment.NewLine;
                    downloadFile = numberedDoc;
                    fileName = outputFileToUser;
                    outputText += $"Processing Complete";
                }
            }
            else
            {
                if (HasImage == true)
                {
                    outputText = "Move Pages using text and images." + Environment.NewLine + "No pagination." + Environment.NewLine;
                    outputText += Environment.NewLine + $"Processing file: " + Environment.NewLine + pdfFile.Name + Environment.NewLine;
                    var outputPdf = await moveModel.MovePaginateImages(msPDF);
                    var outputFileToUser = $"{pdfFile.Name.Replace(".pdf", "")} Moved on Images.pdf";
                    outputText += Environment.NewLine + $"File Created: " + Environment.NewLine + outputFileToUser + Environment.NewLine;
                    var buffer = outputPdf.ToArray();
                    downloadFile = buffer;
                    fileName = outputFileToUser;
                    outputText += $"Processing Complete";
                }
                else
                {
                    outputText = "Move Pages using text." + Environment.NewLine + "No pagination." + Environment.NewLine;
                    outputText += Environment.NewLine + $"Processing file: " + Environment.NewLine + pdfFile.Name + Environment.NewLine;

                    var outputPdf = await moveModel.MovePaginateText(msPDF);
                    var outputFileToUser = $"{pdfFile.Name.Replace(".pdf", "")} Moved on Text.pdf";
                    outputText += Environment.NewLine + $"File Created: " + Environment.NewLine + outputFileToUser + Environment.NewLine;
                    var buffer = outputPdf.ToArray();
                    downloadFile = buffer;
                    fileName = outputFileToUser;
                    outputText += $"Processing Complete";
                }

            }
        }
        else
        {
            if (newChoice == PaginationProcess.Pagination)
            {
                outputText = "Paginate Document." + Environment.NewLine + Environment.NewLine;
                outputText += Environment.NewLine + $"Processing file: " + Environment.NewLine + pdfFile.Name + Environment.NewLine;
                var outputFileToUser = $"{pdfFile.Name.Replace(".pdf", "")} Paginated.pdf";
                var outstream = new MemoryStream();
                try
                {
                    using (var pdfOut = new PdfDocument(new PdfReader(msPDF), new PdfWriter(outstream)))
                    {
                        Document document = new Document(pdfOut);

                        for (int page = 1; page <= pdfOut.GetNumberOfPages(); page++)
                        {
                            Rectangle rectangle = pdfOut.GetPage(page).GetPageSize();
                            var width = rectangle.GetWidth();
                            var middle = width / 2;
                            document.ShowTextAligned(new Paragraph(String.Format("Page " + page + " of " + pdfOut.GetNumberOfPages())), middle, 7, page, TextAlignment.CENTER, VerticalAlignment.BOTTOM, 0);
                        }
                    }
                }
                catch (Exception ex)
                {
                    outputText += $"Failed to repaginate document due to {ex.Message}";
                }
                outputText += Environment.NewLine + $"File Created: " + Environment.NewLine + outputFileToUser + Environment.NewLine;
                var buffer = outstream.ToArray();
                downloadFile = buffer;
                fileName = outputFileToUser;
                outputText += $"Processing Complete";
            }
            else if (newChoice == PaginationProcess.Repagination)
            {
                outputText += "You cannot repaginate a document without Remove or Move - please select Paginate instead.";
            }
            else
            {
                return;
            }
        }
    }
}
