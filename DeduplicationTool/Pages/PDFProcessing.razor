@page "/processingpage"
@using DeduplicationTool.Models
@using Microsoft.Win32;
@using System;
@using System.Collections.Generic;
@using System.ComponentModel;
@using System.IO;
@using System.Linq;
@using System.Text;
@using System.Threading.Tasks;
@using System.Windows;
@using System.ComponentModel.DataAnnotations
@inject IJSRuntime jsRuntime

<PageTitle>PDF Processing Page</PageTitle>

<style>
    body {
        background-color: #292C33;
        color: white;
    }
    div {text-align: left; }
    textarea { resize: none; font-size: 16px; }
    .btn:focus {
        background-color: #ff6e40;
    }
    .btn {
        background-color: #4d7985;
    }
</style>

<h3>PDF Processing</h3>

<text>&nbsp; &nbsp;&nbsp;</text>

<div>
    <InputFile OnChange="@OnFileSelection"></InputFile>
</div>

<text>&nbsp; &nbsp;&nbsp;</text>
<div class="form-check">
    <input class="form-check-input" type="checkbox" @bind-value="containsImages" id="imageCheck" />
    <label class="form-check-label" for="imageCheck">
        Use Image Processing
    </label>
</div>
<div>
    <text>&nbsp; &nbsp;&nbsp;</text>
</div>
<div>
    @foreach (var choice in new[] { Processes.Replace, Processes.Remove, Processes.Move, Processes.None })
    {
        <label style="margin: 10px">
            <input name="processChoice" type="radio"
            value="@choice"
            checked="@(currentChoice == choice)"
            @onchange="@(() => {currentChoice = choice; })">
            @choice.ToString()
        </label>
    
    }
</div>
<div>
    <text>&nbsp; &nbsp;&nbsp;</text>
</div>
<div>
    @foreach (var choice in new[] { PaginationProcess.Pagination, PaginationProcess.Repagination, PaginationProcess.None })
    {
        <label style="margin: 10px">
            <input name="paginationChoice" type="radio"
            value="@choice"
            checked="@(newChoice == choice)"
            @onchange="@(() => {newChoice = choice; })">
            @choice.ToString()
        </label>
    }
</div>
<div>
    <text>&nbsp; &nbsp;&nbsp;</text>
</div>
<div>
    <div style="margin-left: 10px; margin-right: 40px">
       <p>If you select 'Replace' then enter the phrase you would like to see on the placeholder page<br />Use XX where you would like the page number to appear, remove this example if you prefer a blank page.</p>
       <textarea cols="100" rows="2" @bind="placeHolder"></textarea>
    </div>
</div>
<text>&nbsp; &nbsp;&nbsp;</text>
<div >
    <div style="margin-left: 10px; margin-right: 40px">
       <p>Processing:</p>
       <textarea cols="100" rows="10" @bind="outputText"></textarea>
    </div>
</div>
<text>&nbsp; &nbsp;&nbsp;</text>
<button class="btn btn-primary" @onclick="DownloadPDF">Download PDF File</button>
<text>&nbsp; &nbsp;&nbsp;</text>



@code {
    string? outputText;
    public string? placeHolder { get; set; } = "Placeholder for Duplicate of Page XX";
    public bool containsImages { get; set; }
    enum Processes { Replace, Remove, Move, None };
    enum PaginationProcess { Pagination, Repagination, None }
    Processes currentChoice = Processes.None;
    PaginationProcess newChoice = PaginationProcess.None;
    public byte[]? downloadFile;
    public string? fileName;
    private int MAXALLOWEDSIZE = 15000000;

    //protected override void OnInitialized()
    //{
    //    placeHolder = "Placeholder for Duplicate of Page XX";
    //}
    private async Task DownloadPDF()
    {
        string base64String = Convert.ToBase64String(downloadFile, 0, downloadFile.Length);
        await jsRuntime.InvokeVoidAsync("downloadFile", "application/pdf", base64String, fileName);
    }
    public void Reset()
    {
        outputText = "";
        containsImages = false;
        currentChoice = Processes.None;
        newChoice = PaginationProcess.None;
    }
    private async Task OnFileSelection(InputFileChangeEventArgs e)
    {
        ReplacePDFPages replaceModel = new ReplacePDFPages();
        RemovePDFPages removeModel = new RemovePDFPages();
        Pagination paginationModel = new Pagination();
        PDFAnalysis analysisModel = new PDFAnalysis();
        MovePDFPages moveModel = new MovePDFPages();

        if (currentChoice == Processes.None)
        {
            if (newChoice == PaginationProcess.None)
            {
                outputText = "You have not made any valid selections.";
                return;
            }
        }
        IBrowserFile pdfFile = e.File;
        if (!pdfFile.Name.Contains(".pdf") && !pdfFile.Name.Contains(".PDF"))
        {
            outputText = "You must select a PDF file";
            return;
        }
        if (pdfFile.Size > 20000000)
        {
            outputText = "The PDF you have chosen is too large, the limit is 20mb.  If your file says 20mb, then it may be rounding down.";
            return;
        }
        Stream stream = pdfFile.OpenReadStream(MAXALLOWEDSIZE);
        var msPDF = new MemoryStream();
        await stream.CopyToAsync(msPDF);
        msPDF.Position = 0;
        outputText = "";
        StateHasChanged();
        await Task.Delay(1);



        if (currentChoice == Processes.Replace)
        {
            // Since the numbering doesn't change it changes Repaginate to Paginate.
            if (newChoice == PaginationProcess.Repagination)
            {
                newChoice = PaginationProcess.Pagination;
            }
            // If paginate is true then it will number the document in its current state
            if (newChoice == PaginationProcess.Pagination)
            {
                // Does a different comparison if the document has images on the page.
                if (containsImages == true)
                {
                    outputText = "Replace Pages using image processing. Paginate Document after replacement" + Environment.NewLine;
                    outputText += Environment.NewLine + $"Processing file: " + pdfFile.Name + Environment.NewLine;
                    var outputPdf = await replaceModel.ReplacePaginateImages(msPDF, placeHolder);
                    var outputFileToUser = $"{pdfFile.Name.Replace(".pdf", "")} Images Placeholder Paginated.pdf";
                    outputText += Environment.NewLine + $"File Created: " + Environment.NewLine + outputFileToUser + Environment.NewLine;
                    downloadFile = outputPdf;
                    fileName = outputFileToUser;
                    outputText += Environment.NewLine + $"Processing Complete";
                }
                // Just compares the text on each page.
                else
                {
                    outputText = "Replace Pages using only text. Paginate Document after replacement" + Environment.NewLine;
                    outputText += Environment.NewLine + $"Processing file: " + Environment.NewLine + pdfFile.Name + Environment.NewLine;
                    var outputPdf = await replaceModel.ReplacePaginateText(msPDF, placeHolder);
                    outputText += $"Replaced Pages: " + Environment.NewLine;
                    var outputFileToUser = $"{pdfFile.Name.Replace(".pdf", "")} Text Placeholder Paginated.pdf";
                    outputText += Environment.NewLine + $"File Created: " + Environment.NewLine + outputFileToUser + Environment.NewLine;
                    //string numberedDoc = Pagination.PaginateDocument(outputPdf);
                    downloadFile = outputPdf;
                    fileName = outputFileToUser;
                    outputText += Environment.NewLine + $"Processing Complete";
                }
            }
            else if (newChoice == PaginationProcess.None)
            {
                if (containsImages == true)
                {
                    outputText = "Replace Pages using image processing. No pagination" + Environment.NewLine;
                    outputText += Environment.NewLine + $"Processing file: " + Environment.NewLine + pdfFile.Name + Environment.NewLine;
                    var outputPdf = await replaceModel.ReplaceOnImages(msPDF, placeHolder);
                    var outputFileToUser = $"{pdfFile.Name.Replace(".pdf", "")} Image Placeholder.pdf";
                    outputText += Environment.NewLine + $"File Created: " + Environment.NewLine + outputFileToUser + Environment.NewLine;
                    downloadFile = outputPdf;
                    fileName = outputFileToUser;
                    outputText += Environment.NewLine + $"Processing Complete";
                }
                else
                {
                    outputText = "Replace Pages using text. No pagination" + Environment.NewLine;
                    outputText += Environment.NewLine + $"Processing file: " + Environment.NewLine + pdfFile.Name + Environment.NewLine;
                    var outputPdf = await replaceModel.ReplaceOnText(msPDF, placeHolder);
                    var outputFileToUser = $"{pdfFile.Name.Replace(".pdf", "")} Text Placeholder.pdf";
                    outputText += Environment.NewLine + $"File Created: " + Environment.NewLine + outputFileToUser + Environment.NewLine;
                    downloadFile = outputPdf;
                    fileName = outputFileToUser;
                    outputText += Environment.NewLine + $"Processing Complete";
                }
            }
        }
        else if (currentChoice == Processes.Remove)
        {
            if (newChoice == PaginationProcess.Pagination)
            {
                if (containsImages == true)
                {
                    outputText = "Remove Pages using image processing. Paginate Document" + Environment.NewLine;
                    outputText += $"Processing file: " + Environment.NewLine + pdfFile.Name + Environment.NewLine;
                    var outputPdf = await removeModel.RemovePaginateImages(msPDF);
                    var outputFileToUser = $"{pdfFile.Name.Replace(".pdf", "")} Removed on Images Paginated.pdf";
                    outputText += Environment.NewLine + $"File Created: " + Environment.NewLine + outputFileToUser + Environment.NewLine;
                    downloadFile = outputPdf;
                    fileName = outputFileToUser;
                    outputText += Environment.NewLine + $"Processing Complete";
                }
                else
                {
                    outputText = "Remove Pages using text. Paginate Document" + Environment.NewLine;
                    outputText += Environment.NewLine + $"Processing file: " + Environment.NewLine + pdfFile.Name + Environment.NewLine;

                    var outputPdf = await removeModel.RemovePaginateText(msPDF);
                    var outputFileToUser = $"{pdfFile.Name.Replace(".pdf", "")} Removed on Text Paginated.pdf";
                    outputText += Environment.NewLine + $"File Created: " + Environment.NewLine + outputFileToUser + Environment.NewLine;
                    downloadFile = outputPdf;
                    fileName = outputFileToUser;
                    outputText += Environment.NewLine + $"Processing Complete";
                }
            }
            else if (newChoice == PaginationProcess.Repagination)
            {
                if (containsImages == true)
                {
                    outputText = "Remove pages using image processing. Keep original pagination." + Environment.NewLine;
                    outputText += Environment.NewLine + $"Processing file: " + Environment.NewLine + pdfFile.Name + Environment.NewLine;
                    var outputPdf = await removeModel.RemoveRepaginateImages(msPDF);
                    var outputFileToUser = $"{pdfFile.Name.Replace(".pdf", "")} Removed on Images Repaginated.pdf";
                    outputText += Environment.NewLine + $"File Created: " + Environment.NewLine + outputFileToUser + Environment.NewLine;
                    downloadFile = outputPdf;
                    fileName = outputFileToUser;
                    outputText += Environment.NewLine + $"Processing Complete Images";
                }
                else
                {
                    outputText = "Remove Pages using text. Keep original pagination." + Environment.NewLine;
                    outputText += Environment.NewLine + $"Processing file: " + Environment.NewLine + pdfFile.Name + Environment.NewLine;
                    var outputPdf = await removeModel.RemoveRepaginateText(msPDF);
                    var outputFileToUser = $"{pdfFile.Name.Replace(".pdf", "")} Removed on Text Repaginated.pdf";
                    outputText += Environment.NewLine + $"File Created: " + Environment.NewLine + outputFileToUser + Environment.NewLine;
                    downloadFile = outputPdf;
                    fileName = outputFileToUser;
                    outputText += Environment.NewLine + $"Processing Complete Text";
                }
            }
            else
            {
                if (containsImages == true)
                {
                    outputText = "Remove Pages using image processing." + Environment.NewLine;
                    outputText += Environment.NewLine + $"Processing file: " + Environment.NewLine + pdfFile.Name + Environment.NewLine;
                    var outputPdf = await removeModel.RemoveOnImages(msPDF);
                    var outputFileToUser = $"{pdfFile.Name.Replace(".pdf", "")} Removed on Images.pdf";
                    outputText += Environment.NewLine + $"File Created: " + Environment.NewLine + outputFileToUser + Environment.NewLine;
                    var buffer = outputPdf.ToArray();
                    downloadFile = buffer;
                    fileName = outputFileToUser;
                    outputText += Environment.NewLine + $"Processing Complete";
                }
                else
                {
                    outputText = "Remove Pages using text." + Environment.NewLine;
                    outputText += Environment.NewLine + $"Processing file: " + Environment.NewLine + pdfFile.Name + Environment.NewLine;
                    var outputPdf = await removeModel.RemoveOnText(msPDF);
                    var outputFileToUser = $"{pdfFile.Name.Replace(".pdf", "")} Removed on Text.pdf";
                    outputText += Environment.NewLine + $"File Created: " + Environment.NewLine + outputFileToUser + Environment.NewLine;
                    var buffer = outputPdf.ToArray();
                    downloadFile = buffer;
                    fileName = outputFileToUser;
                    outputText += Environment.NewLine + $"Processing Complete";
                }
            }
        }
        else if (currentChoice == Processes.Move)
        {
            // TODO: Final set?
            if (newChoice == PaginationProcess.Pagination)
            {
                if (containsImages == true)
                {
                    outputText = "Move Pages using image processing. Paginate document." + Environment.NewLine;
                    outputText += Environment.NewLine + $"Processing file: " + Environment.NewLine + pdfFile.Name + Environment.NewLine;
                    var outputPdf = await moveModel.MovePaginateImages(msPDF);
                    var outputFileToUser = $"{pdfFile.Name.Replace(".pdf", "")} Moved on Images Paginated.pdf";
                    outputText += Environment.NewLine + $"File Created: " + Environment.NewLine + outputFileToUser + Environment.NewLine;
                    downloadFile = outputPdf;
                    fileName = outputFileToUser;
                    outputText += $"Processing Complete";
                }
                else
                {
                    outputText = "Move Pages using text. Paginate document." + Environment.NewLine;
                    outputText += Environment.NewLine + $"Processing file: " + Environment.NewLine + pdfFile.Name + Environment.NewLine;
                    var outputPdf = await moveModel.MovePaginateText(msPDF);
                    var outputFileToUser = $"{pdfFile.Name.Replace(".pdf", "")} Moved on Images Paginated.pdf";
                    outputText += Environment.NewLine + $"File Created: " + Environment.NewLine +  outputFileToUser + Environment.NewLine;
                    downloadFile = outputPdf;
                    fileName = outputFileToUser;
                    outputText += $"Processing Complete";
                }
            }
            else if (newChoice == PaginationProcess.Repagination)
            {
                if (containsImages == true)
                {
                    outputText = "Move Pages using image processing. Repaginate document." + Environment.NewLine;
                    outputText += Environment.NewLine + $"Processing file: " + Environment.NewLine + pdfFile.Name + Environment.NewLine;
                    var outputPdf = await moveModel.MoveRepaginateImages(msPDF);
                    var outputFileToUser = $"{pdfFile.Name.Replace(".pdf", "")} Moved on Images Repaginated.pdf";
                    outputText += Environment.NewLine + $"File Created: " + Environment.NewLine + outputFileToUser + Environment.NewLine;
                    downloadFile = outputPdf;
                    fileName = outputFileToUser;
                    outputText += Environment.NewLine + $"Processing Complete";
                }
                else
                {
                    outputText = "Move Pages using text. Repaginate document." + Environment.NewLine;
                    outputText += Environment.NewLine + $"Processing file: " + Environment.NewLine + pdfFile.Name + Environment.NewLine;
                    var outputPdf = await moveModel.MoveRepaginateText(msPDF);
                    var outputFileToUser = $"{pdfFile.Name.Replace(".pdf", "")} Moved on Text Repaginated.pdf";
                    outputText += Environment.NewLine + $"File Created: " + Environment.NewLine + outputFileToUser + Environment.NewLine;
                    downloadFile = outputPdf;
                    fileName = outputFileToUser;
                    outputText += Environment.NewLine + $"Processing Complete";
                }
            }
            else
            {
                if (containsImages == true)
                {
                    outputText = "Move Pages using image processing. No pagination." + Environment.NewLine;
                    outputText += Environment.NewLine + $"Processing file: " + Environment.NewLine + pdfFile.Name + Environment.NewLine;
                    var outputPdf = await moveModel.MoveOnImages(msPDF);
                    var outputFileToUser = $"{pdfFile.Name.Replace(".pdf", "")} Moved on Images.pdf";
                    outputText += Environment.NewLine + $"File Created: " + Environment.NewLine + outputFileToUser + Environment.NewLine;
                    downloadFile = outputPdf;
                    fileName = outputFileToUser;
                    outputText += Environment.NewLine + $"Processing Complete";
                }
                else
                {
                    outputText = "Move Pages using text. No pagination." + Environment.NewLine;
                    outputText += Environment.NewLine + $"Processing file: " + Environment.NewLine + pdfFile.Name + Environment.NewLine;
                    var outputPdf = await moveModel.MoveOnText(msPDF);
                    var outputFileToUser = $"{pdfFile.Name.Replace(".pdf", "")} Moved on Text.pdf";
                    outputText += Environment.NewLine + $"File Created: " + Environment.NewLine + outputFileToUser + Environment.NewLine;
                    downloadFile = outputPdf;
                    fileName = outputFileToUser;
                    outputText += Environment.NewLine + $"Processing Complete";
                }

            }
        }
        else
        {
            if (newChoice == PaginationProcess.Repagination)
            {
                newChoice = PaginationProcess.Pagination;
            }
            if (newChoice == PaginationProcess.Pagination)
            {
                outputText = "Paginate Document." + Environment.NewLine + Environment.NewLine;
                outputText += Environment.NewLine + $"Processing file: " + Environment.NewLine + pdfFile.Name + Environment.NewLine;
                var outputFileToUser = $"{pdfFile.Name.Replace(".pdf", "")} Paginated.pdf";
                var outstream = new MemoryStream();
                try
                {
                    using (var pdfOut = new PdfDocument(new PdfReader(msPDF), new PdfWriter(outstream)))
                    {
                        Document document = new Document(pdfOut);

                        for (int page = 1; page <= pdfOut.GetNumberOfPages(); page++)
                        {
                            Rectangle rectangle = pdfOut.GetPage(page).GetPageSize();
                            var width = rectangle.GetWidth();
                            var middle = width / 2;
                            document.ShowTextAligned(new Paragraph(String.Format("Page " + page + " of " + pdfOut.GetNumberOfPages())), middle, 7, page, TextAlignment.CENTER, VerticalAlignment.BOTTOM, 0);
                        }
                    }
                }
                catch (Exception ex)
                {
                    outputText += $"Failed to repaginate document due to {ex.Message}";
                }
                outputText += Environment.NewLine + $"File Created: " + Environment.NewLine + outputFileToUser + Environment.NewLine;
                downloadFile = outstream.ToArray();
                fileName = outputFileToUser;
                outputText += Environment.NewLine + $"Processing Complete";
            }
            else
            {
                return;
            }
        }
    }
}
