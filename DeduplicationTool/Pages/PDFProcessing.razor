@page "/processingpage"
@using DeduplicationTool.Models
@using Microsoft.Win32;
@using System;
@using System.Collections.Generic;
@using System.ComponentModel;
@using System.IO;
@using System.Linq;
@using System.Text;
@using System.Threading.Tasks;
@using System.Windows;
@using System.ComponentModel.DataAnnotations
@inject IJSRuntime jsRuntime

<PageTitle>PDF Processing Page</PageTitle>

<style>
    body {
        background-color: #292C33;
        color: white;
    }
    div {text-align: left; }
    textarea { resize: none; font-size: 16px; }
    .btn:focus {
        background-color: #ff6e40;
    }
    .btn {
        background-color: #4d7985;
    }
</style>

<h3>PDF Processing</h3>

<text>&nbsp; &nbsp;&nbsp;</text>

<div>
    <InputFile OnChange="@OnFileSelection"></InputFile>
</div>

<text>&nbsp; &nbsp;&nbsp;</text>
<div class="form-check">
    <input class="form-check-input" type="checkbox" @bind-value="HasImage" id="imageCheck" />
    <label class="form-check-label" for="imageCheck">
        Document Contains Images
    </label>
</div>
<div>
    <text>&nbsp; &nbsp;&nbsp;</text>
</div>
<div>
    @foreach (var choice in new[] { Processes.Replace, Processes.Remove, Processes.Move, Processes.None })
    {
        <label style="margin: 10px">
            <input name="processChoice" type="radio"
            value="@choice"
            checked="@(currentChoice == choice)"
            @onchange="@(() => {currentChoice = choice; })">
            @choice.ToString()
        </label>
    
    }
</div>
<div>
    <text>&nbsp; &nbsp;&nbsp;</text>
</div>
<div>
    @foreach (var choice in new[] { PaginationProcess.Pagination, PaginationProcess.Repagination, PaginationProcess.None })
    {
        <label style="margin: 10px">
            <input name="paginationChoice" type="radio"
            value="@choice"
            checked="@(newChoice == choice)"
            @onchange="@(() => {newChoice = choice; })">
            @choice.ToString()
        </label>
    }
</div>
@*<div>
    <div style="margin-left: 10px; margin-right: 40px">
       <p>Analysis Results</p>
       <textarea cols="100" rows="5" @bind="placeHolder"></textarea>
    </div>
</div>*@
<text>&nbsp; &nbsp;&nbsp;</text>
<div >
    <div style="margin-left: 10px; margin-right: 40px">
       <p>Analysis Results</p>
       <textarea cols="100" rows="10" @bind="outputText"></textarea>
    </div>
</div>
<text>&nbsp; &nbsp;&nbsp;</text>
<button class="btn btn-primary" @onclick="DownloadPDF">Download PDF File</button>
<text>&nbsp; &nbsp;&nbsp;</text>



@code {
    string? outputText;
    public string? placeHolder { get; set; }
    public bool HasImage { get; set; }
    enum Processes { Replace, Remove, Move, None };
    enum PaginationProcess { Pagination, Repagination, None }
    Processes currentChoice = Processes.None;
    PaginationProcess newChoice = PaginationProcess.None;
    public byte[]? downloadFile;
    public string? fileName;
    private int MAXALLOWEDSIZE = 15000000;

    protected override void OnInitialized()
    {
        placeHolder = "Enter Placeholder Language here." + "\n" + "Enter XX where you want the number for the duplicate page"+ "\n" + "Example:" + "\n\n" + "Placeholder for Duplicate of Page XX";
    }
    private async Task DownloadPDF()
    {
        string base64String = Convert.ToBase64String(downloadFile, 0, downloadFile.Length);
        await jsRuntime.InvokeVoidAsync("downloadFile", "application/pdf", base64String, fileName);
    }
    private async Task OnFileSelection(InputFileChangeEventArgs e)
    {
        ReplacePDFPages replaceModel = new ReplacePDFPages();
        RemovePDFPages removeModel = new RemovePDFPages();
        Pagination paginationModel = new Pagination();
        PDFAnalysis analysisModel = new PDFAnalysis();
        MovePDFPages moveModel = new MovePDFPages();
        IBrowserFile pdfFile = e.File;
        Stream stream = pdfFile.OpenReadStream(MAXALLOWEDSIZE);
        var msPDF = new MemoryStream();
        await stream.CopyToAsync(msPDF);
        msPDF.Position = 0;

        if (currentChoice == Processes.Replace)
        {
            // Since the numbering doesn't change it changes Repaginate to Paginate.
            if (newChoice == PaginationProcess.Repagination)
            {
                newChoice = PaginationProcess.Pagination;
            }
            // If paginate is true then it will number the document in its current state
            if (newChoice == PaginationProcess.Pagination)
            {
                // Does a different comparison if the document has images on the page.
                if (HasImage == true)
                {
                    outputText = "Replace Pages using images." + Environment.NewLine + "Paginate Document after replacement" + Environment.NewLine + Environment.NewLine;
                    outputText += Environment.NewLine + $"Processing file: " + pdfFile.Name + Environment.NewLine + Environment.NewLine;

                    var (outputPdf, DeDupetitle) = await replaceModel.ReplacePaginateImages(pdfFile, placeHolder);
                    outputText += Environment.NewLine + $"File Created: " + Environment.NewLine + DeDupetitle + Environment.NewLine + Environment.NewLine;
                    downloadFile = outputPdf;
                    fileName = DeDupetitle;
                    outputText += $"Processing Complete";
                }
                // Just compares the text on each page.
                else
                {
                    outputText = "Replace Pages using text" + Environment.NewLine + "Paginate Document after replacement";
                    outputText += Environment.NewLine + $"Processing file: " + Environment.NewLine + pdfFile.Name + Environment.NewLine;

                    var (outputPdf, outputfileName) = await replaceModel.ReplacePaginateText(pdfFile, placeHolder);
                    outputText += $"Replaced Places: " + Environment.NewLine;
                    outputText += $"File Created: " + Environment.NewLine + outputfileName + Environment.NewLine;
                    //string numberedDoc = Pagination.PaginateDocument(outputPdf);
                    downloadFile = outputPdf;
                    fileName = outputfileName;
                    outputText += $"Processing Complete";
                }
            }
            else if (newChoice == PaginationProcess.None)
            {
                if (HasImage == true)
                {
                    outputText = "Replace Pages using images." + Environment.NewLine + Environment.NewLine;
                    outputText += Environment.NewLine + $"Processing file: " + Environment.NewLine + pdfFile.Name + Environment.NewLine + Environment.NewLine;
                    var outputPdf = await replaceModel.ReplacePaginateImages(pdfFile, placeHolder);
                    //var DeDupetitle = System.IO.Path.GetFileName(outputPdf);
                    outputText += Environment.NewLine + $"File Created: " + Environment.NewLine + pdfFile.Name + Environment.NewLine + Environment.NewLine;
                }
                else
                {
                    outputText = "Replace Pages using text" + Environment.NewLine + Environment.NewLine;
                    outputText += Environment.NewLine + $"Processing file: " + Environment.NewLine + pdfFile.Name + Environment.NewLine + Environment.NewLine;
                    var (outputPdf, outputFileName) =  await replaceModel.ReplacePaginateText(pdfFile, placeHolder);
                    outputText += Environment.NewLine + $"File Created: " + Environment.NewLine + outputFileName;
                }
            }
        }

        else if (currentChoice == Processes.Remove)
        {
            if (newChoice == PaginationProcess.Pagination)
            {
                if (HasImage == true)
                {
                    outputText = "Remove Pages using images." + Environment.NewLine + "Paginate Document" + Environment.NewLine + Environment.NewLine;
                    outputText += Environment.NewLine + $"Processing file: " + Environment.NewLine + pdfFile.Name + Environment.NewLine + Environment.NewLine;

                    string outputPdf = await removeModel.RemovePaginateImages(pdfFile);
                    var pageArray = outputPdf.Split(new[] { '\n', '\r' }, StringSplitOptions.RemoveEmptyEntries);
                    var DeDupetitle = System.IO.Path.GetFileName(pageArray[0]);
                    var filePathToPass = pageArray[0];
                    outputText += Environment.NewLine + $"File Created: " + Environment.NewLine + DeDupetitle + Environment.NewLine + Environment.NewLine;
                    string numberedDoc = Pagination.PaginateDocument(filePathToPass);
                    var newNumberstitle = System.IO.Path.GetFileName(numberedDoc);
                    outputText += Environment.NewLine + $"File Created: " + Environment.NewLine + newNumberstitle + Environment.NewLine + Environment.NewLine;
                }
                else
                {
                    outputText = "Remove Pages using text." + Environment.NewLine + "Paginate Document" + Environment.NewLine + Environment.NewLine;
                    outputText += Environment.NewLine + $"Processing file: " + Environment.NewLine + pdfFile.Name + Environment.NewLine + Environment.NewLine;

                    string outputPdf = await removeModel.RemovePaginateText(pdfFile);
                    var pageArray = outputPdf.Split(new[] { '\n', '\r' }, StringSplitOptions.RemoveEmptyEntries);
                    var DeDupetitle = System.IO.Path.GetFileName(pageArray[0]);
                    var filePathToPass = pageArray[0];
                    outputText += Environment.NewLine + $"File Created: " + Environment.NewLine + DeDupetitle + Environment.NewLine + Environment.NewLine;
                    string numberedDoc = Pagination.PaginateDocument(filePathToPass);
                    var newNumberstitle = System.IO.Path.GetFileName(numberedDoc);
                    outputText += Environment.NewLine + $"File Created: " + Environment.NewLine + newNumberstitle + Environment.NewLine + Environment.NewLine;
                }
            }
            else if (newChoice == PaginationProcess.Repagination)
            {
                if (HasImage == true)
                {
                    outputText = "Remove pages using images." + Environment.NewLine + "Keep original pagination." + Environment.NewLine + Environment.NewLine;
                    outputText += Environment.NewLine + $"Processing file: " + Environment.NewLine + pdfFile.Name + Environment.NewLine + Environment.NewLine;

                    string outputPdf = await removeModel.RemoveRepaginateImages(pdfFile);
                    string pageCountAsString = await analysisModel.PDFPageCount(msPDF);
                    int pageCount = int.Parse(pageCountAsString);
                    var pageArray = outputPdf.Split(new[] { '\n', '\r' }, StringSplitOptions.RemoveEmptyEntries);
                    var DeDupetitle = System.IO.Path.GetFileName(pageArray[0]);
                    var filePathToPass = pageArray[0];
                    List<string> pagesAsString = new List<string>(pageArray);
                    List<int> pagesToRemove = new List<int>();
                    pagesAsString.RemoveAt(0);
                    foreach (var page in pagesAsString)
                    {
                        pagesToRemove.Add(int.Parse(page));
                    }

                    outputText += Environment.NewLine + $"File Created: " + Environment.NewLine + DeDupetitle + Environment.NewLine + Environment.NewLine;
                    string numberedDoc = Pagination.RepaginateMovedPages(filePathToPass, pageCount, pagesToRemove);
                    var newNumberstitle = System.IO.Path.GetFileName(numberedDoc);
                    outputText += Environment.NewLine + $"File Created: " + Environment.NewLine + newNumberstitle + Environment.NewLine + Environment.NewLine;
                }
                else
                {
                    outputText = "Remove Pages using text." + Environment.NewLine + "Keep original pagination." + Environment.NewLine + Environment.NewLine;
                    outputText += Environment.NewLine + $"Processing file: " + Environment.NewLine + pdfFile.Name + Environment.NewLine + Environment.NewLine;

                    string outputPdf = await removeModel.RemoveRepaginateText(pdfFile);
                    string pageCountAsString = await analysisModel.PDFPageCount(msPDF);
                    int pageCount = int.Parse(pageCountAsString);
                    var pageArray = outputPdf.Split(new[] { '\n', '\r' }, StringSplitOptions.RemoveEmptyEntries);
                    var DeDupetitle = System.IO.Path.GetFileName(pageArray[0]);
                    var filePathToPass = pageArray[0];
                    List<string> pagesAsString = new List<string>(pageArray);
                    List<int> pagesToRemove = new List<int>();
                    pagesAsString.RemoveAt(0);
                    foreach (var page in pagesAsString)
                    {
                        pagesToRemove.Add(int.Parse(page));
                    }

                    outputText += Environment.NewLine + $"File Created: " + Environment.NewLine + DeDupetitle + Environment.NewLine + Environment.NewLine;
                    string numberedDoc = Pagination.RepaginateMovedPages(filePathToPass, pageCount, pagesToRemove);
                    var newNumberstitle = System.IO.Path.GetFileName(numberedDoc);
                    outputText += Environment.NewLine + $"File Created: " + Environment.NewLine + newNumberstitle + Environment.NewLine + Environment.NewLine;
                }
            }
            else
            {
                if (HasImage == true)
                {
                    outputText = "Remove Pages using images." + Environment.NewLine + Environment.NewLine;
                    outputText += Environment.NewLine + $"Processing file: " + Environment.NewLine + pdfFile.Name + Environment.NewLine + Environment.NewLine;

                    string outputPdf = await removeModel.RemovePaginateImages(pdfFile);
                    var pageArray = outputPdf.Split(new[] { '\n', '\r' }, StringSplitOptions.RemoveEmptyEntries);
                    var DeDupetitle = System.IO.Path.GetFileName(pageArray[0]);
                    outputText += Environment.NewLine + $"File Created: " + Environment.NewLine + DeDupetitle + Environment.NewLine + Environment.NewLine;
                }
                else
                {
                    outputText = "Remove Pages using text." + Environment.NewLine + Environment.NewLine;
                    outputText += Environment.NewLine + $"Processing file: " + Environment.NewLine + pdfFile.Name + Environment.NewLine + Environment.NewLine;

                    string outputPdf = await removeModel.RemovePaginateText(pdfFile);
                    var pageArray = outputPdf.Split(new[] { '\n', '\r' }, StringSplitOptions.RemoveEmptyEntries);
                    var DeDupetitle = System.IO.Path.GetFileName(pageArray[0]);
                    outputText += Environment.NewLine + $"File Created: " + Environment.NewLine + DeDupetitle + Environment.NewLine + Environment.NewLine;
                }
            }
        }
        else if (currentChoice == Processes.Move)
        {
            if (newChoice == PaginationProcess.Pagination)
            {
                if (HasImage == true)
                {
                    outputText = "Move Pages using images." + Environment.NewLine + "Paginate document." + Environment.NewLine + Environment.NewLine;
                    outputText += Environment.NewLine + $"Processing file: " + Environment.NewLine + pdfFile.Name + Environment.NewLine + Environment.NewLine;


                    // WE ARE HERE SO FAR!!!

                    string outputPdf = await moveModel.MovePaginateImages(pdfFile);
                    var pageArray = outputPdf.Split(new[] { '\n', '\r' }, StringSplitOptions.RemoveEmptyEntries);
                    var DeDupetitle = System.IO.Path.GetFileName(pageArray[0]);
                    var filePathToPass = pageArray[0];
                    outputText += Environment.NewLine + $"File Created: " + Environment.NewLine + DeDupetitle + Environment.NewLine + Environment.NewLine;
                    string numberedDoc = Pagination.PaginateDocument(filePathToPass);
                    var newNumberstitle = System.IO.Path.GetFileName(numberedDoc);
                    outputText += Environment.NewLine + $"File Created: " + Environment.NewLine + newNumberstitle + Environment.NewLine + Environment.NewLine;
                }
                else
                {
                    outputText = "Move Pages using text." + Environment.NewLine + "Paginate document." + Environment.NewLine + Environment.NewLine;
                    outputText += Environment.NewLine + $"Processing file: " + Environment.NewLine + pdfFile.Name + Environment.NewLine + Environment.NewLine;

                    string outputPdf = await moveModel.MovePaginateText(pdfFile);
                    var pageArray = outputPdf.Split(new[] { '\n', '\r' }, StringSplitOptions.RemoveEmptyEntries);
                    var DeDupetitle = System.IO.Path.GetFileName(pageArray[0]);
                    outputText += Environment.NewLine + $"File Created: " + Environment.NewLine + DeDupetitle + Environment.NewLine + Environment.NewLine;
                    var filePathToPass = pageArray[0];
                    string numberedDoc = Pagination.PaginateDocument(filePathToPass);
                    var newNumberstitle = System.IO.Path.GetFileName(numberedDoc);
                    outputText += Environment.NewLine + $"File Created: " + Environment.NewLine +  newNumberstitle + Environment.NewLine + Environment.NewLine;
                }
            }
            else if (newChoice == PaginationProcess.Repagination)
            {
                if (HasImage == true)
                {
                    outputText = "Move Pages using images." + Environment.NewLine + Environment.NewLine;
                    outputText += Environment.NewLine + $"Processing file: " + Environment.NewLine + pdfFile.Name + Environment.NewLine + Environment.NewLine;

                    string outputPdf = await moveModel.MoveRepaginateImages(pdfFile);
                    string pageCountAsString = await analysisModel.PDFPageCount(msPDF);
                    int pageCount = int.Parse(pageCountAsString);
                    var pageArray = outputPdf.Split(new[] { '\n', '\r' }, StringSplitOptions.RemoveEmptyEntries);
                    var DeDupetitle = System.IO.Path.GetFileName(pageArray[0]);
                    
                    var filePathToPass = pageArray[0];
                    List<string> pagesAsString = new List<string>(pageArray);
                    List<int> pagesToRemove = new List<int>();
                    pagesAsString.RemoveAt(0);
                    foreach (var page in pagesAsString)
                    {
                        pagesToRemove.Add(int.Parse(page));
                    }

                    outputText += Environment.NewLine + $"File Created: " + Environment.NewLine + DeDupetitle + Environment.NewLine + Environment.NewLine;
                    string numberedDoc = Pagination.RepaginateMovedPages(filePathToPass, pageCount, pagesToRemove);
                    if (numberedDoc.Contains("Failed to paginate "))
                    {
                        outputText += Environment.NewLine + $"{numberedDoc}";
                        return;
                    }
                    var newNumberstitle = System.IO.Path.GetFileName(numberedDoc);
                    outputText += Environment.NewLine + $"File Created: " + Environment.NewLine + newNumberstitle + Environment.NewLine + Environment.NewLine;
                }
                else
                {
                    outputText = "Move Pages using text." + Environment.NewLine + Environment.NewLine;
                    outputText += Environment.NewLine + $"Processing file: " + Environment.NewLine + pdfFile.Name + Environment.NewLine + Environment.NewLine;

                    string outputPdf = await moveModel.MoveRepaginateText(pdfFile);
                    string pageCountAsString = await analysisModel.PDFPageCount(msPDF);
                    int pageCount = int.Parse(pageCountAsString);
                    var pageArray = outputPdf.Split(new[] { '\n', '\r' }, StringSplitOptions.RemoveEmptyEntries);
                    var DeDupetitle = System.IO.Path.GetFileName(pageArray[0]);
                    var filePathToPass = pageArray[0];
                    List<string> pagesAsString = new List<string>(pageArray);
                    List<int> pagesToRemove = new List<int>();
                    pagesAsString.RemoveAt(0);
                    foreach (var page in pagesAsString)
                    {
                        pagesToRemove.Add(int.Parse(page));
                    }

                    outputText += Environment.NewLine + $"File Created: " + Environment.NewLine + DeDupetitle + Environment.NewLine + Environment.NewLine;
                    string numberedDoc = Pagination.RepaginateMovedPages(filePathToPass, pageCount, pagesToRemove);
                    var newNumberstitle = System.IO.Path.GetFileName(numberedDoc);
                    outputText += Environment.NewLine + $"File Created: " + Environment.NewLine + newNumberstitle + Environment.NewLine + Environment.NewLine;
                }
            }
            else
            {
                if (HasImage == true)
                {
                    outputText = "Move Pages using text and images." + Environment.NewLine + "No pagination." + Environment.NewLine + Environment.NewLine;
                    outputText += Environment.NewLine + $"Processing file: " + Environment.NewLine + pdfFile.Name + Environment.NewLine + Environment.NewLine;

                    string outputPdf = await moveModel.MovePaginateImages(pdfFile);
                    var pageArray = outputPdf.Split(new[] { '\n', '\r' }, StringSplitOptions.RemoveEmptyEntries);
                    var DeDupetitle = System.IO.Path.GetFileName(pageArray[0]);
                    outputText += Environment.NewLine + $"File Created: " + Environment.NewLine + DeDupetitle + Environment.NewLine + Environment.NewLine;
                }
                else
                {
                    outputText = "Move Pages using text." + Environment.NewLine + "No pagination." + Environment.NewLine + Environment.NewLine;
                    outputText += Environment.NewLine + $"Processing file: " + Environment.NewLine + pdfFile.Name + Environment.NewLine + Environment.NewLine;

                    string outputPdf = await moveModel.MovePaginateText(pdfFile);
                    var pageArray = outputPdf.Split(new[] { '\n', '\r' }, StringSplitOptions.RemoveEmptyEntries);
                    var DeDupetitle = System.IO.Path.GetFileName(pageArray[0]);
                    outputText += Environment.NewLine + $"File Created: " + Environment.NewLine + DeDupetitle + Environment.NewLine + Environment.NewLine;
                }
                
            }
        }
        else
        {
            if (newChoice == PaginationProcess.Pagination)
            {
                outputText = "Paginate Document." + Environment.NewLine + Environment.NewLine;
                outputText += Environment.NewLine + $"Processing file: " + Environment.NewLine + pdfFile.Name + Environment.NewLine + Environment.NewLine;
                var cleanedTitle = pdfFile.Name.Replace(".pdf", "");
                var outputFileToUser = $"{cleanedTitle} Paginated.pdf";
                var outputFile = System.IO.Path.Combine("./", outputFileToUser);
                try
                {
                    using (var pdfOut = new PdfDocument(new PdfReader(msPDF), new PdfWriter(outputFile)))
                    {
                        Document document = new Document(pdfOut);

                        for (int page = 1; page <= pdfOut.GetNumberOfPages(); page++)
                        {
                            Rectangle rectangle = pdfOut.GetPage(page).GetPageSize();
                            var width = rectangle.GetWidth();
                            var middle = width / 2;
                            document.ShowTextAligned(new Paragraph(String.Format("Page " + page + " of " + pdfOut.GetNumberOfPages())), middle, 7, page, TextAlignment.CENTER, VerticalAlignment.BOTTOM, 0);
                        }
                    }
                }
                catch (Exception ex)
                {
                    outputText += $"Failed to repaginate document due to {ex.Message}";
                }
                outputText += Environment.NewLine + $"File Created: " + Environment.NewLine + outputFile + Environment.NewLine + Environment.NewLine;
            }
            else if (newChoice == PaginationProcess.Repagination)
            {
                outputText += "You cannot repaginate a document without Remove or Move - please select Paginate instead.";
            }
            else
            {
                return;
            }
        }
    }
}
