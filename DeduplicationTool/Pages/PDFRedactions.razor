@page "/redactionspage"
@using DeduplicationTool.Models
@using Microsoft.Win32;
@using System;
@using System.Collections.Generic;
@using System.ComponentModel;
@using System.IO;
@using System.Linq;
@using System.Text;
@using System.Threading.Tasks;
@using System.Windows;
@using System.Text.RegularExpressions
@inject IJSRuntime jsRuntime

<PageTitle>PDF Redactions Page</PageTitle>

<style>
    body {
        background-color: #292C33;
        color: white;
    }
    div {text-align: left; }
    textarea { resize: none; font-size: 16px; }
    .btn:focus {
        background-color: #ff6e40;
    }
    .btn {
        background-color: #4d7985;
    }
</style>

<h3>PDF Redactions</h3>

<text>&nbsp; &nbsp;&nbsp;</text>

<div>
    <InputFile OnChange="@OnFileSelection"></InputFile>
</div>

<text>&nbsp; &nbsp;&nbsp;</text>
<div>
    <text>&nbsp; &nbsp;&nbsp;</text>
</div>

<div>
    <text>&nbsp; &nbsp;&nbsp;</text>
</div>
<div>
    <div style="margin-left: 10px; margin-right: 40px">
       <p>Enter Text to Redact or enter Regular Expression</p>
       <textarea cols="100" rows="3" @bind="placeHolder"></textarea>
    </div>
</div>
<text>&nbsp; &nbsp;&nbsp;</text>
<div >
    <div style="margin-left: 10px; margin-right: 40px">
       <p>Processing Results</p>
       <textarea cols="100" rows="10" @bind="outputText"></textarea>
    </div>
</div>
<text>&nbsp; &nbsp;&nbsp;</text>
<button class="btn btn-primary" @onclick="DownloadPDF">Download PDF File</button>
<text>&nbsp; &nbsp;&nbsp;</text>



@code {
    string? outputText;
    public string? placeHolder { get; set; }
    public byte[]? downloadFile;
    string[] toRedactArray;
    public string? fileName;
    private int MAXALLOWEDSIZE = 15000000;

    private async Task DownloadPDF()
    {
        string base64String = Convert.ToBase64String(downloadFile, 0, downloadFile.Length);
        await jsRuntime.InvokeVoidAsync("downloadFile", "application/pdf", base64String, fileName);
    }
    private async Task OnFileSelection(InputFileChangeEventArgs e)
    {
        outputText = "";
        if (placeHolder != "" && placeHolder != null)
        {
            toRedactArray = placeHolder.Split(new[] { '\n', '\r' }, StringSplitOptions.RemoveEmptyEntries);
            foreach (var item in toRedactArray)
            {
                if (VerifyRegEx(item))
                {

                }
                else
                {
                    outputText = "You have entered a Regular Expression that is invalid.";
                    return;
                }

            }
        }
        else
        {
            outputText = "You have not entered a value to be redacted.";
            return;
        }
        PDFRedaction redactPdf = new PDFRedaction();
        IBrowserFile pdfFile = e.File;
        if (!pdfFile.Name.Contains(".pdf") && !pdfFile.Name.Contains(".PDF"))
        {
            outputText = "You must select a PDF file";
            return;
        }
        if (pdfFile.Size > 20000000)
        {
            outputText = "The PDF you have chosen is too large, the limit is 20mb.  If your file says 20mb, then it may be rounding down.";
            return;
        }
        Stream stream = pdfFile.OpenReadStream(MAXALLOWEDSIZE);
        var msPDF = new MemoryStream();
        await stream.CopyToAsync(msPDF);
        msPDF.Position = 0;

        outputText = "Redacting document." + Environment.NewLine;
        outputText += Environment.NewLine + $"Processing file: " + pdfFile.Name + Environment.NewLine;
        var outputPdf = await redactPdf.RedactText(msPDF, toRedactArray);
        var outputFileToUser = $"{pdfFile.Name.Replace(".pdf", "")} Redacted.pdf";
        outputText += Environment.NewLine + $"File Created: " + Environment.NewLine + outputFileToUser + Environment.NewLine;
        downloadFile = outputPdf;
        fileName = outputFileToUser;
        outputText += Environment.NewLine + $"Processing Complete";
    }
    public static bool VerifyRegEx(string testPattern)
    {
        bool isValid = true;
    
        if ((testPattern != null) && (testPattern.Trim( ).Length > 0))
        {
            try
            {
                Regex.Match("", testPattern);
            }
            catch (ArgumentException)
            {
                // BAD PATTERN: Syntax error
                isValid = false;
            }
        }
        else
        {
            //BAD PATTERN: Pattern is null or blank
            isValid = false;
        }
    
        return (isValid);
    }
}
